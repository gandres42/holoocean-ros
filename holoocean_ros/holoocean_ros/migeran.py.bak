import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import json
import numpy as np
import matplotlib.pyplot as plt
import imghdr

with open("/home/gavin/Git/holoocean_ws/src/holoocean/holoocean_ros/holoocean_ros/config2.json") as f:
    config = json.load(f)
config = config['agents'][0]['sensors'][-1]["configuration"]
azi = config['Azimuth']
minR = config['RangeMin']
maxR = config['RangeMax']
binsR = config['RangeBins']
binsA = config['AzimuthBins']

class Migeran(Node):
    def __init__(self):
        super().__init__('minimal_node')
        # with open(self.get_parameter('config_path').get_parameter_value().string_value) as f:

        plt.ion()
        self.fig, ax = plt.subplots(subplot_kw=dict(projection='polar'), figsize=(8,5))
        ax.set_theta_zero_location("N") # type: ignore
        ax.set_thetamin(-azi/2) # type: ignore
        ax.set_thetamax(azi/2) # type: ignore

        theta = np.linspace(-azi/2, azi/2, binsA)*np.pi/180
        r = np.linspace(minR, maxR, binsR)
        T, R = np.meshgrid(theta, r)
        z = np.zeros_like(T)

        plt.grid(False)
        self.plot = ax.pcolormesh(T, R, z, cmap='gray', shading='auto', vmin=0, vmax=255)
        plt.tight_layout()
        self.fig.canvas.draw()
        self.fig.canvas.flush_events()

        self.bridge = CvBridge()
        self.create_subscription(Image, '/holoocean/auv0/ImagingSonar', self.sonar_cb, 1)

    def sonar_cb(self, msg):
        try:
            img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='mono8')
            h, w = img.shape
            center = (w // 2, h // 2)
            max_radius = np.sqrt((w / 2)**2 + (h / 2)**2)

            # Convert to polar coordinates
            polar_img = cv2.warpPolar(img, (w, int(max_radius)), center, max_radius, cv2.WARP_POLAR_LINEAR)

            # Optional: rotate 90 degrees to match typical sonar formats
            polar_img = cv2.rotate(polar_img, cv2.ROTATE_90_CLOCKWISE)

            cv2.imwrite('polar_image.png', polar_img)
            # self.plot.set_array(cv_image)

            # self.fig.canvas.draw()
            # self.fig.canvas.flush_events()
        except Exception as e:
            self.get_logger().error(f'Image conversion error: {e}')
        


def main(args=None):
    rclpy.init(args=args)
    node = Migeran()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()